generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String       @id @default(uuid())
  email                   String       @unique
  password                String?
  fullName                String
  phoneNumber             String?      @unique
  isWorking               Boolean?     @default(false)
  experience              Int?
  company                 String?
  role                    String?
  preferredRole           String?
  currentCTC              String?
  expectedCTC             String?
  resume                  String?
  photo                   String?
  techstacks              String[]
  accounts                Account[]
  incomingInterviewReqs   Int?
  accepted                Int?
  rejected                Int?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  interviewsAsInterviewer Interviews[] @relation("InterviewerRelation")
  interviewsAsInterviewee Interviews[] @relation("IntervieweeRelation")
}

model Account {
  userId            String
  provider          String
  providerAccountId String
  expiresAt         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Interviews {
  id                String     @id @default(uuid())
  intervieweeId     String
  interviewerId     String
  scheduledAt       DateTime
  accepted_For_Time DateTime?
  techstack         String[]
  emailLogs         EmailLog[]
  isCompleted       Boolean    @default(false)
  rating            Int?
  feedback          String?
  allRating         Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  interviewer User @relation("InterviewerRelation", fields: [interviewerId], references: [id])
  interviewee User @relation("IntervieweeRelation", fields: [intervieweeId], references: [id])
}

model Job {
  id           String   @id @default(uuid())
  title        String
  description  String
  location     String
  salary       String
  company      String
  link         String
  requirements String[]
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EmailLog {
  id          String     @id @default(uuid())
  interviewId String
  interview   Interviews @relation(fields: [interviewId], references: [id])
  emailSentAt DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Handbook {
  id          String   @id @default(uuid())
  title       String
  description String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HandbookRequest {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
