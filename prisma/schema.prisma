generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String?
  fullName        String
  phoneNumber     String?   @unique
  isWorking       Boolean?  @default(false)
  experience      Int?
  company         String?
  role            String?
  preferredRole   String?
  currentCTC      String?
  expectedCTC     String?
  resume          String?
  photo           String?
  techstacks      String[]
  accounts        Account[]
  // accpectanceRate Float?
  // rejectionRate   Float?

  // Optional for WebAuthn support
  // Authenticator Authenticator[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  interviewPairings1 InterviewPairing[] @relation("User1Interviews")
  interviewPairings2 InterviewPairing[] @relation("User2Interviews")
}

model Account {
  userId            String
  provider          String
  providerAccountId String
  expires_at        Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }

model InterviewPairing {
  id      String @id @default(uuid())
  user1Id String
  user2Id String

  user1 User @relation("User1Interviews", fields: [user1Id], references: [id])
  user2 User @relation("User2Interviews", fields: [user2Id], references: [id])

  scheduledAt DateTime
  // accepted_for_Different_time : DateTime
  emailLogs   EmailLog[]
  isCompleted Boolean    @default(false)
  // rating : technical, communication, problem solving, completed
  ratingUser1 Json?
  ratingUser2 Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Job {
  id           String   @id @default(uuid())
  title        String
  description  String
  location     String
  salary       String
  company      String
  link         String
  requirements String[]
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EmailLog {
  id                 String           @id @default(uuid())
  interviewPairingId String
  interviewPairing   InterviewPairing @relation(fields: [interviewPairingId], references: [id])
  emailSentAt        DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
